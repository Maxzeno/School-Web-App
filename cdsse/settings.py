"""
Django settings for cdsse project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
try:
    from .secret_data import SecretData # this is were i set important keys
except ImportError:
    class SecretData:
        DATABASE = {
            'ENGINE': '',
            'NAME': '',
            'HOST': '',
            'PORT': '',
            'USER': '',
            'PASSWORD': '',
        }

        CLOUDINARY_STORAGE = {
            'CLOUD_NAME': '',
            'API_KEY': '',
            'API_SECRET': ''
        }

        EMAIL = {
            'EMAIL_HOST_USER': '',
            'EMAIL_HOST_PASSWORD': ''
        }

        SECRET_KEY = 'nbcsnmcsmnscmnsmnsmnsdmnsdnmm2j23'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SecretData.SECRET_KEY

# WARNING: don't run with debug turned on in production!
DEBUG = False

# This makes the app to use local db eg sqlite instead of production postgresql created by me
DEV_MODE_SET_ = True

# Upload local create be me
TRY_LOCAL_ = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'cdsse.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'excel_response',
    'adminuser',
    'semiadmin',
    'main',
    'management',
    'registration',
    'student',
    'teacher',
]

if not TRY_LOCAL_:
    INSTALLED_APPS.append('cloudinary')
    INSTALLED_APPS.append('cloudinary_storage')


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'cdsse.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'adminuser/templates'),
            os.path.join(BASE_DIR, 'semiadmin/templates'),
            os.path.join(BASE_DIR, 'main/templates'),
            os.path.join(BASE_DIR, 'registration/templates'),
            os.path.join(BASE_DIR, 'student/templates'),
            os.path.join(BASE_DIR, 'teacher/templates'),
            os.path.join(BASE_DIR, 'management/templates'),
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cdsse.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if DEV_MODE_SET_:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
            # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3-2'),
            # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3-3'),
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3-4'),
        }
    }

else:
    DATABASES = {
        'default': {
            'ENGINE': SecretData.DATABASE.get('ENGINE') or '',
            'NAME': SecretData.DATABASE.get('NAME') or '',
            'HOST': SecretData.DATABASE.get('HOST') or '',
            'PORT': SecretData.DATABASE.get('PORT') or '',
            'USER': SecretData.DATABASE.get('USER') or '',
            'PASSWORD': SecretData.DATABASE.get('PASSWORD') or ''
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static/static/'),
    os.path.join(BASE_DIR, 'main/static/'),
    os.path.join(BASE_DIR, 'registration/static/'),
    # os.path.join(BASE_DIR, 'static_store/portal/'), moved to CLONE/static_store/portal/
]

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

##### this should be removed be i because i defined the new one in an if statement
##### DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


if not TRY_LOCAL_:

    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

    CLOUDINARY_STORAGE = {
        'CLOUD_NAME': SecretData.CLOUDINARY_STORAGE.get('CLOUD_NAME') or '',
        'API_KEY': SecretData.CLOUDINARY_STORAGE.get('API_KEY') or '',
        'API_SECRET': SecretData.CLOUDINARY_STORAGE.get('API_SECRET') or ''
    }


CRISPY_TEMPLATE_PACK = 'bootstrap4'


###DEVELOPMENT
if TRY_LOCAL_:
    EMAIL_HOST = 'localhost'
    EMAIL_PORT = '1025'

###PRODUCTION
else:
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_HOST_USER = SecretData.EMAIL.get('EMAIL_HOST_USER') or ''
    EMAIL_HOST_PASSWORD = SecretData.EMAIL.get('EMAIL_HOST_PASSWORD') or ''
    EMAIL_PORT = '587'
    EMAIL_USE_TLS = True

AUTH_USER_MODEL = 'management.User'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
